#!/usr/bin/env node

/**
 * Billy, Agente X - Setup Script
 * Helps with initial configuration and setup
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const chalk = require('chalk');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function log(message, color = 'white') {
  console.log(chalk[color](message));
}

async function setupEnvironment() {
  log('\nü§ñ Billy, Agente X - Setup Assistant\n', 'cyan');
  
  // Check if .env already exists
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('‚ùì .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      log('‚úÖ Setup cancelled. Using existing .env file.', 'yellow');
      rl.close();
      return;
    }
  }

  log('üìù Let\'s configure your Billy environment:\n', 'green');

  // Collect configuration
  const config = {};

  // OpenAI Configuration
  log('üîë OpenAI Configuration:', 'yellow');
  config.OPENAI_API_KEY = await question('Enter your OpenAI API key: ');
  
  const model = await question('OpenAI model (default: gpt-4o-mini): ');
  config.OPENAI_MODEL = model || 'gpt-4o-mini';

  // Database Configuration
  log('\nüóÑÔ∏è Database Configuration:', 'yellow');
  const mongoUri = await question('MongoDB URI (default: mongodb://localhost:27017/billy-agente-x): ');
  config.MONGODB_URI = mongoUri || 'mongodb://localhost:27017/billy-agente-x';

  const redisUrl = await question('Redis URL (default: redis://localhost:6379): ');
  config.REDIS_URL = redisUrl || 'redis://localhost:6379';

  // Billy Configuration
  log('\nü§ñ Billy Configuration:', 'yellow');
  const billyName = await question('Billy name (default: Billy, Agente X): ');
  config.BILLY_NAME = billyName || 'Billy, Agente X';

  const company = await question('Company name (default: Seguradora X): ');
  config.BILLY_COMPANY = company || 'Seguradora X';

  const timezone = await question('Timezone (default: America/Sao_Paulo): ');
  config.BILLY_TIMEZONE = timezone || 'America/Sao_Paulo';

  // WhatsApp Configuration
  log('\nüì± WhatsApp Configuration:', 'yellow');
  const sessionName = await question('Session name (default: billy-session): ');
  config.WA_SESSION_NAME = sessionName || 'billy-session';

  // Generate .env file
  const envContent = `# Billy, Agente X Configuration
# Generated by setup script on ${new Date().toISOString()}

# OpenAI Configuration
OPENAI_API_KEY=${config.OPENAI_API_KEY}
OPENAI_MODEL=${config.OPENAI_MODEL}
OPENAI_MAX_TOKENS=1000
OPENAI_TEMPERATURE=0.7

# Database Configuration
MONGODB_URI=${config.MONGODB_URI}
REDIS_URL=${config.REDIS_URL}

# WhatsApp Configuration
WA_SESSION_NAME=${config.WA_SESSION_NAME}
WA_PRINT_QR=true
WA_MARK_ONLINE=true

# Billy Configuration
BILLY_NAME=${config.BILLY_NAME}
BILLY_COMPANY=${config.BILLY_COMPANY}
BILLY_TIMEZONE=${config.BILLY_TIMEZONE}
BILLY_LANGUAGE=pt-BR

# Session Configuration
SESSION_TIMEOUT=1800000
MAX_CONVERSATION_HISTORY=20
MEMORY_RETENTION_DAYS=30

# Business Configuration
POLICY_API_URL=http://localhost:3001/api/policies
BILLING_API_URL=http://localhost:3001/api/billing
PAYMENT_GATEWAY_URL=http://localhost:3001/api/payments

# Monitoring & Analytics
ENABLE_ANALYTICS=true
LOG_LEVEL=info

# Queue Configuration
QUEUE_REDIS_URL=${config.REDIS_URL}
QUEUE_CONCURRENCY=5

# Security
JWT_SECRET=billy-${Date.now()}-secret
ENCRYPTION_KEY=billy-${Date.now()}-encryption

# Development
NODE_ENV=development
PORT=3000
`;

  fs.writeFileSync(envPath, envContent);
  log('\n‚úÖ .env file created successfully!', 'green');

  // Update key.json for backward compatibility
  const keyJsonPath = path.join(process.cwd(), 'key.json');
  if (fs.existsSync(keyJsonPath)) {
    const keyJson = JSON.parse(fs.readFileSync(keyJsonPath, 'utf8'));
    keyJson.keyopenai = config.OPENAI_API_KEY;
    fs.writeFileSync(keyJsonPath, JSON.stringify(keyJson, null, 2));
    log('‚úÖ key.json updated for backward compatibility', 'green');
  }

  log('\nüéâ Setup completed! Next steps:', 'cyan');
  log('1. Install dependencies: npm install', 'white');
  log('2. Start MongoDB and Redis (if using local)', 'white');
  log('3. Run Billy: npm start', 'white');
  log('4. Scan QR code with WhatsApp', 'white');
  log('\nüí° For Docker setup: docker-compose up -d', 'yellow');
  
  rl.close();
}

async function checkDependencies() {
  log('\nüîç Checking system dependencies...', 'cyan');
  
  // Check Node.js version
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
  
  if (majorVersion >= 20) {
    log(`‚úÖ Node.js ${nodeVersion} (OK)`, 'green');
  } else {
    log(`‚ùå Node.js ${nodeVersion} (Requires v20+)`, 'red');
    return false;
  }

  // Check if package.json exists
  if (fs.existsSync('package.json')) {
    log('‚úÖ package.json found', 'green');
  } else {
    log('‚ùå package.json not found', 'red');
    return false;
  }

  // Check if node_modules exists
  if (fs.existsSync('node_modules')) {
    log('‚úÖ Dependencies installed', 'green');
  } else {
    log('‚ö†Ô∏è Dependencies not installed. Run: npm install', 'yellow');
  }

  return true;
}

async function main() {
  try {
    const depsOk = await checkDependencies();
    if (!depsOk) {
      log('\n‚ùå Dependency check failed. Please fix the issues above.', 'red');
      process.exit(1);
    }

    await setupEnvironment();
  } catch (error) {
    log(`\n‚ùå Setup failed: ${error.message}`, 'red');
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { setupEnvironment, checkDependencies };
